rsc.colors[rsc.i] = rsc.name
rsc[rsc == rsc.name] = rsc.i
rsc.i = rsc.i + 1
}
rsc = matrix(as.numeric(rsc), nrow = dim(rsc)[1])
image(t(rsc), col = as.vector(rsc.colors), axes = FALSE)
if (length(rownames(RowSideColors)) > 0) {
axis(1, 0:(dim(rsc)[2] - 1)/max(1,(dim(rsc)[2] - 1)), rownames(RowSideColors), las = 2, tick = FALSE)
}
}
}
if (!missing(ColSideColors)) {
if (!is.matrix(ColSideColors)){
par(mar = c(0.5, 0, 0, margins[2]))
image(cbind(1:nc), col = ColSideColors[colInd], axes = FALSE)
} else {
par(mar = c(0.5, 0, 0, margins[2]))
csc = ColSideColors[colInd, , drop=F]
csc.colors = matrix()
csc.names = names(table(csc))
csc.i = 1
for (csc.name in csc.names) {
csc.colors[csc.i] = csc.name
csc[csc == csc.name] = csc.i
csc.i = csc.i + 1
}
csc = matrix(as.numeric(csc), nrow = dim(csc)[1])
image(csc, col = as.vector(csc.colors), axes = FALSE)
if (length(colnames(ColSideColors)) > 0) {
axis(2, 0:(dim(csc)[2] - 1)/max(1,(dim(csc)[2] - 1)), colnames(ColSideColors), las = 2, tick = FALSE)
}
}
}
par(mar = c(margins[1], 0, 0, margins[2]))
x <- t(x)
cellnote <- t(cellnote)
if (revC) {
iy <- nr:1
if (exists("ddr"))
ddr <- rev(ddr)
x <- x[, iy]
cellnote <- cellnote[, iy]
}
else iy <- 1:nr
image(1:nc, 1:nr, x, xlim = 0.5 + c(0, nc), ylim = 0.5 + c(0, nr), axes = FALSE, xlab = "", ylab = "", col = col, breaks = breaks, ...)
retval$carpet <- x
if (exists("ddr"))
retval$rowDendrogram <- ddr
if (exists("ddc"))
retval$colDendrogram <- ddc
retval$breaks <- breaks
retval$col <- col
if (!invalid(na.color) & any(is.na(x))) { # load library(gplots)
mmat <- ifelse(is.na(x), 1, NA)
image(1:nc, 1:nr, mmat, axes = FALSE, xlab = "", ylab = "",
col = na.color, add = TRUE)
}
axis(1, 1:nc, labels = labCol, las = 2, line = -0.5, tick = 0,
cex.axis = cexCol)
if (!is.null(xlab))
mtext(xlab, side = 1, line = margins[1] - 1.25)
axis(4, iy, labels = labRow, las = 2, line = -0.5, tick = 0,
cex.axis = cexRow)
if (!is.null(ylab))
mtext(ylab, side = 4, line = margins[2] - 1.25)
if (!missing(add.expr))
eval(substitute(add.expr))
if (!missing(colsep))
for (csep in colsep) rect(xleft = csep + 0.5, ybottom = rep(0, length(csep)), xright = csep + 0.5 + sepwidth[1], ytop = rep(ncol(x) + 1, csep), lty = 1, lwd = 1, col = sepcolor, border = sepcolor)
if (!missing(rowsep))
for (rsep in rowsep) rect(xleft = 0, ybottom = (ncol(x) + 1 - rsep) - 0.5, xright = nrow(x) + 1, ytop = (ncol(x) + 1 - rsep) - 0.5 - sepwidth[2], lty = 1, lwd = 1, col = sepcolor, border = sepcolor)
min.scale <- min(breaks)
max.scale <- max(breaks)
x.scaled <- scale01(t(x), min.scale, max.scale)
if (trace %in% c("both", "column")) {
retval$vline <- vline
vline.vals <- scale01(vline, min.scale, max.scale)
for (i in colInd) {
if (!is.null(vline)) {
abline(v = i - 0.5 + vline.vals, col = linecol,
lty = 2)
}
xv <- rep(i, nrow(x.scaled)) + x.scaled[, i] - 0.5
xv <- c(xv[1], xv)
yv <- 1:length(xv) - 0.5
lines(x = xv, y = yv, lwd = 1, col = tracecol, type = "s")
}
}
if (trace %in% c("both", "row")) {
retval$hline <- hline
hline.vals <- scale01(hline, min.scale, max.scale)
for (i in rowInd) {
if (!is.null(hline)) {
abline(h = i + hline, col = linecol, lty = 2)
}
yv <- rep(i, ncol(x.scaled)) + x.scaled[i, ] - 0.5
yv <- rev(c(yv[1], yv))
xv <- length(yv):1 - 0.5
lines(x = xv, y = yv, lwd = 1, col = tracecol, type = "s")
}
}
if (!missing(cellnote))
text(x = c(row(cellnote)), y = c(col(cellnote)), labels = c(cellnote),
col = notecol, cex = notecex)
par(mar = c(margins[1], 0, 0, 0))
if (dendrogram %in% c("both", "row")) {
plot(ddr, horiz = TRUE, axes = FALSE, yaxs = "i", leaflab = "none")
}
else plot.new()
par(mar = c(0, 0, if (!is.null(main)) 5 else 0, margins[2]))
if (dendrogram %in% c("both", "column")) {
plot(ddc, axes = FALSE, xaxs = "i", leaflab = "none")
}
else plot.new()
if (!is.null(main))
title(main, cex.main = 1.5 * op[["cex.main"]])
if (key) {
par(mar = c(5, 4, 2, 1), cex = 0.75)
tmpbreaks <- breaks
if (symkey) {
max.raw <- max(abs(c(x, breaks)), na.rm = TRUE)
min.raw <- -max.raw
tmpbreaks[1] <- -max(abs(x), na.rm = TRUE)
tmpbreaks[length(tmpbreaks)] <- max(abs(x), na.rm = TRUE)
}
else {
min.raw <- min(x, na.rm = TRUE)
max.raw <- max(x, na.rm = TRUE)
}
z <- seq(min.raw, max.raw, length = length(col))
image(z = matrix(z, ncol = 1), col = col, breaks = tmpbreaks,
xaxt = "n", yaxt = "n")
par(usr = c(0, 1, 0, 1))
lv <- pretty(breaks)
xv <- scale01(as.numeric(lv), min.raw, max.raw)
axis(1, at = xv, labels = lv)
if (scale == "row")
mtext(side = 1, "Row Z-Score", line = 2)
else if (scale == "column")
mtext(side = 1, "Column Z-Score", line = 2)
else mtext(side = 1, KeyValueName, line = 2)
if (density.info == "density") {
dens <- density(x, adjust = densadj, na.rm = TRUE)
omit <- dens$x < min(breaks) | dens$x > max(breaks)
dens$x <- dens$x[-omit]
dens$y <- dens$y[-omit]
dens$x <- scale01(dens$x, min.raw, max.raw)
lines(dens$x, dens$y/max(dens$y) * 0.95, col = denscol,
lwd = 1)
axis(2, at = pretty(dens$y)/max(dens$y) * 0.95, pretty(dens$y))
title("Color Key\nand Density Plot")
par(cex = 0.5)
mtext(side = 2, "Density", line = 2)
}
else if (density.info == "histogram") {
h <- hist(x, plot = FALSE, breaks = breaks)
hx <- scale01(breaks, min.raw, max.raw)
hy <- c(h$counts, h$counts[length(h$counts)])
lines(hx, hy/max(hy) * 0.95, lwd = 1, type = "s",
col = denscol)
axis(2, at = pretty(hy)/max(hy) * 0.95, pretty(hy))
title("Color Key\nand Histogram")
par(cex = 0.5)
mtext(side = 2, "Count", line = 2)
}
else title("Color Key")
}
else plot.new()
retval$colorTable <- data.frame(low = retval$breaks[-length(retval$breaks)],
high = retval$breaks[-1], color = retval$col)
invisible(retval)
}
prob_matrix=replicate(100, rnorm(20))
drug_names=paste("drug",letters[1:20],sep="_")
patient_ids=paste("patient",c(1:100),sep="_")
rownames(prob_matrix)=drug_names
colnames(prob_matrix)=patient_ids
#Create fake color side bars
drugclass_colors=sample(c("darkorchid","darkred"), length(drug_names), replace = TRUE, prob = NULL)
drugcategory_colors=sample(c("green","darkgreen"), length(drug_names), replace = TRUE, prob = NULL)
subtype_colors=sample(c("red","blue","cyan","pink","yellow","green"), length(patient_ids), replace = TRUE, prob = NULL)
Mcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
Ncolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
Tcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
HER2colors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
PRcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
ERcolors=sample(c("black","white","grey"), length(patient_ids), replace = TRUE, prob = NULL)
rlab=t(cbind(drugclass_colors,drugcategory_colors))
clab=cbind(subtype_colors,Mcolors,Ncolors,Tcolors,HER2colors,PRcolors,ERcolors)
rownames(rlab)=c("Class","Category")
colnames(clab)=c("Subtype","M","N","T","HER2","PR","ER")
#Define custom dist and hclust functions for use with heatmaps
mydist=function(c) {dist(c,method="euclidian")}
myclust=function(c) {hclust(c,method="average")}
#Create heatmap using custom heatmap.3 source code loaded above
pdf(file="heatmap3_example.pdf")
main_title="Drug Response Predictions"
par(cex.main=1)
heatmap.3(prob_matrix, hclustfun=myclust, distfun=mydist, na.rm = TRUE, scale="none", dendrogram="both", margins=c(6,12),
Rowv=TRUE, Colv=TRUE, ColSideColors=clab, RowSideColors=rlab, symbreaks=FALSE, key=TRUE, symkey=FALSE,
density.info="none", trace="none", main=main_title, labCol=FALSE, labRow=drug_names, cexRow=1, col=rev(heat.colors(75)),
ColSideColorsSize=7, RowSideColorsSize=2, KeyValueName="Prob. Response")
legend("topright",legend=c("Basal","LumA","LumB","Her2","Claudin","Normal","","Positive","Negative","NA","","Targeted","Chemo","","Approved","Experimental"),
fill=c("red","blue","cyan","pink","yellow","green","white","black","white","grey","white","darkorchid","darkred","white","green","darkgreen"), border=FALSE, bty="n", y.intersp = 0.7, cex=0.7)
dev.off()
heatmap.3(prob_matrix, hclustfun=myclust, distfun=mydist, na.rm = TRUE, scale="none", dendrogram="both", margins=c(6,12),
Rowv=TRUE, Colv=TRUE, ColSideColors=clab, RowSideColors=rlab, symbreaks=FALSE, key=TRUE, symkey=FALSE,
density.info="none", trace="none", main=main_title, labCol=FALSE, labRow=drug_names, cexRow=1, col=rev(heat.colors(75)),
ColSideColorsSize=7, RowSideColorsSize=2, KeyValueName="Prob. Response")
legend("topright",legend=c("Basal","LumA","LumB","Her2","Claudin","Normal","","Positive","Negative","NA","","Targeted","Chemo","","Approved","Experimental"),
fill=c("red","blue","cyan","pink","yellow","green","white","black","white","grey","white","darkorchid","darkred","white","green","darkgreen"), border=FALSE, bty="n", y.intersp = 0.7, cex=0.7)
getwd()
source("HeatMap3.R")
library("gplots")
prob_matrix=replicate(100, rnorm(20))
drug_names=paste("drug",letters[1:20],sep="_")
patient_ids=paste("patient",c(1:100),sep="_")
rownames(prob_matrix)=drug_names
colnames(prob_matrix)=patient_ids
prob_matrix
drug_names=paste("drug",letters[1:20],sep="_")
patient_ids=paste("patient",c(1:100),sep="_")
rownames(prob_matrix)=drug_names
colnames(prob_matrix)=patient_ids
library("ALL")
data("ALL")
ALL
ALL$mol.biol
eset <- ALL[, ALL$mol.biol %in% c("BCR/ABL", "ALL1/AF4")]
heatmap(exprs(eset[1:100,]))
library(limma)
f <- factor(as.character(eset$mol.biol))
design <- model.matrix(~f)
fit <- eBayes(lmFit(eset,design))
selected  <- p.adjust(fit$p.value[, 2]) <0.05
esetSel <- eset [selected, ]
color.map <- function(mol.biol) {
if (mol.biol=="ALL1/AF4") "#FF0000" else "#0000FF"
}
patientcolors <- unlist(lapply(esetSel$mol.bio, color.map))
heatmap(exprs(esetSel), col=topo.colors(100), ColSideColors=patientcolors)
heatmap(exprs(esetSel),  ColSideColors=patientcolors)
shiny::runApp('Dropbox/HIHISIV/Database-HIHISIV')
eset <- ALL[, ALL$mol.biol %in% c("BCR/ABL", "ALL1/AF4")]
eset
color.map <- function(mol.biol) {
if (mol.biol=="ALL1/AF4") "#FF0000" else "#0000FF"
}
patientcolors <- unlist(lapply(esetSel$mol.bio, color.map))
heatmap(exprs(esetSel),
#col=topo.colors(100),
ColSideColors=patientcolors)
esetSel$mol.bio
esetSel
ALL$mol.biol
heatmap(exprs(esetSel),
#col=topo.colors(100),
ColSideColors=patientcolors)
exprs(esetSel)
head(exprs(esetSel))
esetSel$mol.bio
shiny::runApp('Developent/Shiny2/pacmen')
runApp('Developent/Shiny2/shinyMethyl-master/R')
library(minfi)
source("http://bioconductor.org/biocLite.R")
biocLite("minfi")
getwd()
library(devtools)
install_github("rstudio/shiny")
install_github("jfortin1/shinyMethyl")
install_github("jfortin1/shinyMethylData")
shiny::runApp('DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
runApp('DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
runApp('DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
runApp('DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
shiny::runApp()
runApp('~/DEVELOPMENT-house/Shiny2/pacmen')
runApp()
runApp('~/DEVELOPMENT-house/Shiny2/pacmen')
runApp('~/DEVELOPMENT-house/Shiny2/ShinyVolcanoPlot-master')
install.packages("metricsgraphics")
runApp('~/DEVELOPMENT-house/Shiny2/ShinyVolcanoPlot-master')
runApp('~/DEVELOPMENT-house/Shiny2/ShinyVolcanoPlot-master')
runApp('~/DEVELOPMENT-house/GeNNet/ShinyGennet')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
sliderInput("hl", "P-Value Threshold:",
1, 6, value = 1.30, step=0.1),
verbatimTextOutput('conversion'),
sliderInput("vl", "log2(FC) Threshold:",
0,2, value = 0.8, step=0.1),
)
wellPanel(
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp()
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
)
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
load("data/example.rda")
load("/home/quelopes/DEVELOPMENT-house/GeNNet/GennetShiny/data/example.rda")
dir("/home/quelopes/DATA-home/GennetD/GSE3292/Data/")
get(".csv",pheno)
pheno= dir("/home/quelopes/DATA-home/GennetD/GSE3292/Data/")
get(".csv",pheno)
regexpr(".csv",pheno)
gregexpr(".csv",pheno)
grep(".csv",pheno)
pheno
pheno[grep(".csv",pheno)]
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
pheno= dir(caminho)
read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
pheno=read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
head(pheno)
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
pheno= dir(caminho)
example=read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp()
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
pheno= dir(caminho)
pheno=read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
pheno
caminho = "/data/"
pheno= dir(caminho)
pheno
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
pheno= dir(caminho)
pheno
caminho = "data/"
pheno= dir(caminho)
pheno
load("data/example.rda")
runApp('~/DEVELOPMENT-house/GeNNet/GennetShiny')
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
caminho = "data/GSE3292.csv"
pheno= dir(caminho)
pheno=read.table(pheno,sep=",",head=T)
pheno
getwd()
setwd("../GennetShiny/")
pheno= dir(caminho)
pheno=read.table(pheno,sep=",",head=T)
setwd("../GennetShiny/")
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
pheno= dir(caminho)
pheno
caminho = "/home/quelopes/DATA-home/GennetD/GSE3292/Data/"
# caminho = "data/GSE3292.csv"
# setwd("../GennetShiny/")
pheno= dir(caminho)
# pheno=read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
pheno=read.table(pheno,sep=",",head=T)
pheno=read.table(paste(caminho,pheno[grep(".csv",pheno)],sep=""),sep=",",head=T)
runApp()
runApp()
getwd()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
runApp()
runApp()
runApp()
runApp('~/Dropbox/HIHISIV/Database-HIHISIV')
runApp('~/DEVELOPMENT-house/GeNNet/Shiny-GeNNet')
runApp()
runApp()
runApp()
runApp()
runApp('~/Dropbox/HIHISIV/Database-HIHISIV')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Dropbox/HIHISIV/Database-HIHISIV')
celArq = dir("/home/quelopes/DATA-home/GennetD/GSE3292/Data/CEL/")
celArq
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
title: Bioconductor style for PDF documents
runApp()
runApp(shinyApp(
ui = fluidPage(
textOutput("test")
),
server = function(input,output, session) {
output$test <- renderPrint({
cat("test cat")
message("test message")
})
}
))
foo <- function() {
message("one")
message("two")
}
runApp(shinyApp(
ui = fluidPage(
actionButton("btn","Click me"),
textOutput("text")
),
server = function(input,output, session) {
observeEvent(input$btn, {
withCallingHandlers(
foo(),
message = function(m) output$text <- renderPrint(m$message)
)
})
}
))
foo <- function() {
message("one")
Sys.sleep(0.5)
message("two")
}
runApp(shinyApp(
ui = fluidPage(
shinyjs::useShinyjs(),
actionButton("btn","Click me"),
textOutput("text")
),
server = function(input,output, session) {
observeEvent(input$btn, {
withCallingHandlers({
shinyjs::html("text", "")
foo()
},
message = function(m) {
shinyjs::html(id = "text", html = m$message, add = TRUE)
})
})
}
))
server <- function(input, output) {
values <- reactiveValues()
queryMagic <- function() {
print("Warning")
return("Data")
}
output$console <- renderPrint({
logText()
return(print(values[["log"]]))
# You could also use grep("Warning", values[["log"]]) to get warning messages and use shinyBS package
# to create alert message
})
logText <- reactive({
values[["log"]] <- capture.output(data <- queryMagic())
})
}
ui <- shinyUI(fluidPage(
sidebarLayout(
sidebarPanel(
),
mainPanel(verbatimTextOutput("console"))
)
))
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/DEVELOPMENT-house/Shiny2/tcga-shiny-master')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
